//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34209 版自动生成。
// 
#pragma warning disable 1591

namespace RuRo.BLL.WebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ForCenterLabServiceSoap", Namespace="http://tempuri.org")]
    public partial class ForCenterLabService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOPInfoListForSpecimenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientInfoSpecimenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientLabMasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientLabResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreSpecimenInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ForCenterLabService() {
            this.Url = global::RuRo.BLL.Properties.Settings.Default.BLL_WebReference_ForCenterLabService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetOPInfoListForSpecimenCompletedEventHandler GetOPInfoListForSpecimenCompleted;
        
        /// <remarks/>
        public event GetPatientInfoSpecimenCompletedEventHandler GetPatientInfoSpecimenCompleted;
        
        /// <remarks/>
        public event GetPatientLabMasterCompletedEventHandler GetPatientLabMasterCompleted;
        
        /// <remarks/>
        public event GetPatientLabResultCompletedEventHandler GetPatientLabResultCompleted;
        
        /// <remarks/>
        public event StoreSpecimenInfoCompletedEventHandler StoreSpecimenInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS.ForCenterLabService.GetOPInfoListForSpecimen", RequestNamespace="http://tempuri.org", ResponseNamespace="http://tempuri.org", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOPInfoListForSpecimen(string datebegin, string dateend) {
            object[] results = this.Invoke("GetOPInfoListForSpecimen", new object[] {
                        datebegin,
                        dateend});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOPInfoListForSpecimenAsync(string datebegin, string dateend) {
            this.GetOPInfoListForSpecimenAsync(datebegin, dateend, null);
        }
        
        /// <remarks/>
        public void GetOPInfoListForSpecimenAsync(string datebegin, string dateend, object userState) {
            if ((this.GetOPInfoListForSpecimenOperationCompleted == null)) {
                this.GetOPInfoListForSpecimenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOPInfoListForSpecimenOperationCompleted);
            }
            this.InvokeAsync("GetOPInfoListForSpecimen", new object[] {
                        datebegin,
                        dateend}, this.GetOPInfoListForSpecimenOperationCompleted, userState);
        }
        
        private void OnGetOPInfoListForSpecimenOperationCompleted(object arg) {
            if ((this.GetOPInfoListForSpecimenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOPInfoListForSpecimenCompleted(this, new GetOPInfoListForSpecimenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS.ForCenterLabService.GetPatientInfoSpecimen", RequestNamespace="http://tempuri.org", ResponseNamespace="http://tempuri.org", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientInfoSpecimen(string Admno) {
            object[] results = this.Invoke("GetPatientInfoSpecimen", new object[] {
                        Admno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientInfoSpecimenAsync(string Admno) {
            this.GetPatientInfoSpecimenAsync(Admno, null);
        }
        
        /// <remarks/>
        public void GetPatientInfoSpecimenAsync(string Admno, object userState) {
            if ((this.GetPatientInfoSpecimenOperationCompleted == null)) {
                this.GetPatientInfoSpecimenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientInfoSpecimenOperationCompleted);
            }
            this.InvokeAsync("GetPatientInfoSpecimen", new object[] {
                        Admno}, this.GetPatientInfoSpecimenOperationCompleted, userState);
        }
        
        private void OnGetPatientInfoSpecimenOperationCompleted(object arg) {
            if ((this.GetPatientInfoSpecimenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientInfoSpecimenCompleted(this, new GetPatientInfoSpecimenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS.ForCenterLabService.GetPatientLabMaster", RequestNamespace="http://tempuri.org", ResponseNamespace="http://tempuri.org", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientLabMaster(string PatientId, string VisitId) {
            object[] results = this.Invoke("GetPatientLabMaster", new object[] {
                        PatientId,
                        VisitId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientLabMasterAsync(string PatientId, string VisitId) {
            this.GetPatientLabMasterAsync(PatientId, VisitId, null);
        }
        
        /// <remarks/>
        public void GetPatientLabMasterAsync(string PatientId, string VisitId, object userState) {
            if ((this.GetPatientLabMasterOperationCompleted == null)) {
                this.GetPatientLabMasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientLabMasterOperationCompleted);
            }
            this.InvokeAsync("GetPatientLabMaster", new object[] {
                        PatientId,
                        VisitId}, this.GetPatientLabMasterOperationCompleted, userState);
        }
        
        private void OnGetPatientLabMasterOperationCompleted(object arg) {
            if ((this.GetPatientLabMasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientLabMasterCompleted(this, new GetPatientLabMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS.ForCenterLabService.GetPatientLabResult", RequestNamespace="http://tempuri.org", ResponseNamespace="http://tempuri.org", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientLabResult(string OeordID, string TestNo) {
            object[] results = this.Invoke("GetPatientLabResult", new object[] {
                        OeordID,
                        TestNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientLabResultAsync(string OeordID, string TestNo) {
            this.GetPatientLabResultAsync(OeordID, TestNo, null);
        }
        
        /// <remarks/>
        public void GetPatientLabResultAsync(string OeordID, string TestNo, object userState) {
            if ((this.GetPatientLabResultOperationCompleted == null)) {
                this.GetPatientLabResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientLabResultOperationCompleted);
            }
            this.InvokeAsync("GetPatientLabResult", new object[] {
                        OeordID,
                        TestNo}, this.GetPatientLabResultOperationCompleted, userState);
        }
        
        private void OnGetPatientLabResultOperationCompleted(object arg) {
            if ((this.GetPatientLabResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientLabResultCompleted(this, new GetPatientLabResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS.ForCenterLabService.StoreSpecimenInfo", RequestNamespace="http://tempuri.org", ResponseNamespace="http://tempuri.org", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StoreSpecimenInfo(SpecimenRt SpecimenRt) {
            object[] results = this.Invoke("StoreSpecimenInfo", new object[] {
                        SpecimenRt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoreSpecimenInfoAsync(SpecimenRt SpecimenRt) {
            this.StoreSpecimenInfoAsync(SpecimenRt, null);
        }
        
        /// <remarks/>
        public void StoreSpecimenInfoAsync(SpecimenRt SpecimenRt, object userState) {
            if ((this.StoreSpecimenInfoOperationCompleted == null)) {
                this.StoreSpecimenInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreSpecimenInfoOperationCompleted);
            }
            this.InvokeAsync("StoreSpecimenInfo", new object[] {
                        SpecimenRt}, this.StoreSpecimenInfoOperationCompleted, userState);
        }
        
        private void OnStoreSpecimenInfoOperationCompleted(object arg) {
            if ((this.StoreSpecimenInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreSpecimenInfoCompleted(this, new StoreSpecimenInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org")]
    public partial class SpecimenRt {
        
        private string patientIdField;
        
        private string visitIdField;
        
        private string patientNameField;
        
        private Specimen[] specimensField;
        
        /// <remarks/>
        public string PatientId {
            get {
                return this.patientIdField;
            }
            set {
                this.patientIdField = value;
            }
        }
        
        /// <remarks/>
        public string VisitId {
            get {
                return this.visitIdField;
            }
            set {
                this.visitIdField = value;
            }
        }
        
        /// <remarks/>
        public string PatientName {
            get {
                return this.patientNameField;
            }
            set {
                this.patientNameField = value;
            }
        }
        
        /// <remarks/>
        public Specimen[] Specimens {
            get {
                return this.specimensField;
            }
            set {
                this.specimensField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org")]
    public partial class Specimen {
        
        private string idField;
        
        private string nameField;
        
        private string statusField;
        
        private string deptCodeField;
        
        private string dateTimeField;
        
        private string otherInfoField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string DeptCode {
            get {
                return this.deptCodeField;
            }
            set {
                this.deptCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string OtherInfo {
            get {
                return this.otherInfoField;
            }
            set {
                this.otherInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetOPInfoListForSpecimenCompletedEventHandler(object sender, GetOPInfoListForSpecimenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOPInfoListForSpecimenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOPInfoListForSpecimenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPatientInfoSpecimenCompletedEventHandler(object sender, GetPatientInfoSpecimenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientInfoSpecimenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientInfoSpecimenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPatientLabMasterCompletedEventHandler(object sender, GetPatientLabMasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientLabMasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientLabMasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPatientLabResultCompletedEventHandler(object sender, GetPatientLabResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientLabResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientLabResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoreSpecimenInfoCompletedEventHandler(object sender, StoreSpecimenInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoreSpecimenInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoreSpecimenInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591